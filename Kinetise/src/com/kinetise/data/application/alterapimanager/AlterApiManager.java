package com.kinetise.data.application.alterapimanager;


import android.content.Context;
import android.content.SharedPreferences;

import com.kinetise.data.VariableStorage;
import com.kinetise.data.application.AGApplicationState;
import com.kinetise.data.application.feedmanager.DataFeedsMap;
import com.kinetise.data.application.popupmanager.PopupManager;
import com.kinetise.data.descriptors.HttpParamsDataDesc;
import com.kinetise.data.descriptors.types.AGHttpMethodType;
import com.kinetise.data.sourcemanager.AssetsManager;
import com.kinetise.data.sourcemanager.LanguageManager;
import com.kinetise.helpers.http.HttpRequestManager.RequestType;
import com.kinetise.helpers.http.RedirectMap;
import com.kinetise.helpers.preferences.SecurePreferencesHelper;
import com.kinetise.helpers.threading.ThreadPool;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;

public class AlterApiManager {
    private static final String SHARED_PREFERENCE_ALTER_API_SESSION_ID = "sharedAlterApiSessionId";
    private static final String SHARED_AUTO_GENERATED_ALTER_API_SESSION_ID = "sharedAutoGeneratedAlterApiSessionId";
    public static final AGHttpMethodType DEFAULT_METHOD = AGHttpMethodType.POST;

    private static String mAutoGeneratedAlterApiSessionId;
    private static String mAlterApiSessionId;

    public AlterApiManager() {
        retrieveSessionIdFromPreferences();
    }

    public static void retrieveSessionIdFromPreferences() {
        Context context = AGApplicationState.getInstance().getContext();
        SharedPreferences sp = SecurePreferencesHelper.getUserData();
        mAlterApiSessionId = sp.getString(SHARED_PREFERENCE_ALTER_API_SESSION_ID, null);
        mAutoGeneratedAlterApiSessionId = sp.getString(SHARED_AUTO_GENERATED_ALTER_API_SESSION_ID, null);
    }

    public static void saveSessionIdToPreferences() {
        Context context = AGApplicationState.getInstance().getContext();
        SharedPreferences sp = SecurePreferencesHelper.getUserData();
        SharedPreferences.Editor editor = sp.edit();
        if (mAlterApiSessionId != null)
            editor.putString(SHARED_PREFERENCE_ALTER_API_SESSION_ID, mAlterApiSessionId);
        else
            editor.remove(SHARED_PREFERENCE_ALTER_API_SESSION_ID);
        if (mAutoGeneratedAlterApiSessionId != null)
            editor.putString(SHARED_AUTO_GENERATED_ALTER_API_SESSION_ID, mAutoGeneratedAlterApiSessionId);
        else
            editor.remove(SHARED_AUTO_GENERATED_ALTER_API_SESSION_ID);
        editor.apply();
    }

    public static String getAlterApiSesionID() {
        if (mAlterApiSessionId == null)
            return getAutoAlterApiSessionId();
        return mAlterApiSessionId;
    }

    private static String getAutoAlterApiSessionId() {
        if (mAutoGeneratedAlterApiSessionId == null) {
            String uuid = UUID.randomUUID().toString();
            setAutoAlterApiSessionId(uuid);
        }
        return mAutoGeneratedAlterApiSessionId;
    }

    public static void setAutoAlterApiSessionId(String autoAlterApiSessionId) {
        mAutoGeneratedAlterApiSessionId = autoAlterApiSessionId;
        mAlterApiSessionId = null;
        saveSessionIdToPreferences();
    }

    public static boolean isLoggedInToAlterApi() {
        return (mAlterApiSessionId != null);
    }

    public static void setAlterApiSessionId(String pAlterApiSessionId) {
        mAlterApiSessionId = pAlterApiSessionId;
        mAutoGeneratedAlterApiSessionId = null;
        saveSessionIdToPreferences();
    }

    public void login(AGHttpMethodType method, String url, String postBody, HttpParamsDataDesc httpParamsDataDesc, HttpParamsDataDesc headerParamsDataDesc,String responseTransform, IRequestCallback callback) {
        Map<String, String> headers = null;
        if (headerParamsDataDesc != null)
            headers = headerParamsDataDesc.getHttpParamsAsHashMap();
        LoginRequestRunnable request = new LoginRequestRunnable(method, AssetsManager.addHttpQueryParams(url, httpParamsDataDesc), postBody, headers, responseTransform, callback);
        runAlterApiRequest(request);
    }

    public void logout(String url, IRequestCallback callback, HttpParamsDataDesc httpParamsDataDesc) {
        LogoutRequestRunnable request = new LogoutRequestRunnable(AssetsManager.addHttpQueryParams(url, httpParamsDataDesc), null, callback);
        runAlterApiRequest(request);
    }

    public void sendForm(String url, String sendData, IRequestCallback callback, HttpParamsDataDesc httpParamsDataDesc, HttpParamsDataDesc httpHeadersDataDesc) {
        sendForm(DEFAULT_METHOD, url, sendData, callback, httpParamsDataDesc, httpHeadersDataDesc, null);
    }

    public void sendForm(AGHttpMethodType httpMethod, String url, String sendData, IRequestCallback callback, HttpParamsDataDesc httpParamsDataDesc, HttpParamsDataDesc httpHeadersDataDesc, String responseTransform) {
        Map<String, String> headers = new HashMap<>();
        if (httpHeadersDataDesc != null) {
            headers = httpHeadersDataDesc.getHttpParamsAsHashMap();
        }
        if (!headers.containsKey(AGOkHttpConfigurator.CONTENT_TYPE_HEADER_NAME))
            headers.put(AGOkHttpConfigurator.CONTENT_TYPE_HEADER_NAME, AGOkHttpConfigurator.CONTENT_TYPE_JSON);

        AbstractRequestRunnable request = new AbstractRequestRunnable(httpMethod, AssetsManager.addHttpQueryParams(url, httpParamsDataDesc), sendData, headers, responseTransform, RequestType.FORM, callback);
        runAlterApiRequest(request);
    }

    private void runAlterApiRequest(AbstractRequestRunnable request) {
        try {
            ThreadPool.getInstance().execute(request);
        } catch (OutOfMemoryError e) {
            AGApplicationState.getInstance().getSystemDisplay().blockScreenWithLoadingDialog(false);
            PopupManager.showErrorPopup(LanguageManager.getInstance().getString(LanguageManager.SEND_MEMORY_ERROR));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void handleAAResponse(AAResponse response) {
        if (response != null) {
            handleRedirectUrls(response);
            handleApplicationVariables(response);
            handleSessionId(response);
        }
    }

    private static void handleRedirectUrls(AAResponse response) {
        DataFeedsMap.getInstance().remove(response.expiredUrls);
        RedirectMap.getInstance().remove(response.expiredUrls);
    }

    private static void handleSessionId(AAResponse response) {
        if (response.sessionId != null)
            AlterApiManager.setAlterApiSessionId(response.sessionId);
    }

    private static void handleApplicationVariables(AAResponse response) {
        Map.Entry<String, String> entry;
        Iterator<Map.Entry<String, String>> iter = response.applicationVariables.entrySet().iterator();
        while (iter.hasNext()) {
            entry = iter.next();
            VariableStorage.getInstance().addValue(entry.getKey(), entry.getValue());
        }
    }

}
